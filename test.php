
<?php



function show_arr($arr){
    foreach ($arr as $key => $value) {
         foreach ($value as $key2 => $value2) {
             

         }
    }
}
第一章、Linux是什麼與如何學習

1984年之二：GNU計畫與FSF基金會的成立
Richard Mathew Stallman(史托曼)在1984年發起的GNU計畫，對於現今的自由軟體風潮， 真有不可磨滅的地位！目前我們所使用的很多自由軟體或開源軟體，
幾乎均直接或間接受益於GNU這個計畫呢！ 那麼史托曼是何許人也？為何他會發起這個GNU計畫呢？

一個分享的環境：
Richard Mathew Stallman(生於1953年， 網路上自稱的ID為RMS, 註6)從小就很聰明！他在1971年的時候，進入駭客圈中相當出名的人工智慧實驗室(AI Lab.)， 
這個時候的駭客專指電腦功力很強的人，而非破壞電腦的怪客(cracker)喔！

當時的駭客圈對於軟體的著眼點幾乎都是在『分享』，駭客們都認為互相學習對方的程式碼，這樣才是產生更優秀的程式碼的最佳方式！ 
所以 AI 實驗室的駭客們通常會將自己的程式碼公佈出來跟大家討論喔！這個特色對於史托曼的影響很大！

不過，後來由於管理階層以及駭客群們自己的生涯規劃等問題，導致實驗室的優秀駭客離開該實驗室， 並且進入其他商業公司繼續發展優秀的軟體。但史托曼並不服輸，
仍然持續在原來的實驗室開發新的程式與軟體。 後來，他發現到，自己一個人並無法完成所有的工作，於是想要成立一個開放的團體來共同努力！

使用Unix開發階段：
1983年以後，因為實驗室硬體的更換，使得史托曼無法繼續以原有的硬體與作業系統繼續自由程式的撰寫～ 而且他進一步發現到，過去他所使用的Lisp作業系統，是麻省理工學院的專利軟體， 
是無法共享的，這對於想要成立一個開放團體的史托曼是個阻礙。於是他便放棄了Lisp這個系統。 後來，他接觸到Unix這個系統，並且發現，Unix在理論與實際上，都可以在不同的機器間進行移植。
雖然 Unix 依舊是專利軟體， 但至少 Unix 架構上還是比較開放的！於是他開始轉而使用Unix系統。

因為Lisp與Unix是不同的系統，所以，他原本已經撰寫完畢的軟體是無法在Unix上面運行的！為此， 他就開始將軟體移植到Unix上面。並且，為了讓軟體可以在不同的平台上運作， 
因此，史托曼將他發展的軟體均撰寫成可以移植的型態！也就是他都會將程式的原始碼公佈出來！

GNU計畫的推展(註7)：
1984年，史托曼開始GNU計畫， 這個計畫的目的是：建立一個自由、開放的Unix作業系統(Free Unix)。 但是建立一個作業系統談何容易啊！
而且在當時的GNU是僅有自己一個人單打獨鬥的史托曼～ 這實在太麻煩，但又不想放棄這個計畫，那可怎麼辦啊？

聰明的史托曼乾脆反其道而行～『既然作業系統太複雜，我就先寫可以在Unix上面運行的小程式，這總可以了吧？』在這個想法上， 史托曼開始參考Unix上面現有的軟體，
並依據這些軟體的作用開發出功能相同的軟體，且開發期間史托曼絕不看其他軟體的原始碼， 以避免吃上官司。後來一堆人知道免費的GNU軟體，並且實際使用後發現與原有的專利軟體也差不了太多，
於是便轉而使用GNU軟體， 於是GNU計畫逐漸打開知名度。

雖然GNU計畫漸漸打開知名度，但是能見度還是不夠。這時史托曼又想：不論是什麼軟體， 都得要進行編譯成為二進位檔案(binary program)後才能夠執行，如果能夠寫出一個不錯的編譯器，
那不就是大家都需要的軟體了嗎？ 因此他便開始撰寫C語言的編譯器，那就是現在相當有名的GNU C Compiler(gcc)！ 這個點相當的重要！這是因為C語言編譯器版本眾多，但都是專利軟體， 
如果他寫的C編譯器夠棒，效能夠佳，那麼將會大大的讓GNU計畫出現在眾人眼前！如果忘記啥是編譯器， 請回到第零章去瞧瞧編譯程式吧！

但開始撰寫GCC時並不順利，為此，他先轉而將他原先就已經寫過的Emacs編輯器寫成可以在Unix上面跑的軟體，並公布原始碼。 Emacs是一種程式編輯器，
他可以在使用者撰寫程式的過程中就進行程式語法的檢驗，此一功能可以減少程式設計師除錯的時間！ 因為Emacs太優秀了，因此，很多人便直接向他購買。

此時網際網路尚未流行，所以，史托曼便藉著Emacs以磁帶(tape)出售，賺了一點錢 ，進而開始全力撰寫其他軟體。並且成立自由軟體基金會(FSF, Free Software Foundation)，
請更多工程師與志工撰寫軟體。終於還是完成了GCC，這比Emacs還更有幫助！ 此外，他還撰寫了更多可以被呼叫的C函式庫(GNU C library)，
以及可以被使用來操作作業系統的基本介面BASH shell！ 這些都在1990年左右完成了！

Tips鳥哥如果純粹使用文字編輯器來編輯程式的話，那麼程式語法如果寫錯時，只能利用編譯時發生的錯誤訊息來修訂了，這樣實在很沒有效率。 
Emacs則是一個很棒的編輯器！注意！是編輯(editor)而非編譯(compiler)！ 他可以很快的立刻顯示出你寫入的語法可能有錯誤的地方，這對於程式設計師來說， 
實在是一個好到不能再好的工具了！所以才會這麼的受到歡迎啊！
GNU的通用公共許可證：
到了1985年，為了避免GNU所開發的自由軟體被其他人所利用而成為專利軟體， 所以他與律師草擬了有名的通用公共許可證(General Public License, GPL)， 
並且稱呼他為copyleft(相對於專利軟體的copyright！)。 關於GPL的相關內容我們在下一個小節繼續談論，在這裡，必須要說明的是， 由於有GNU所開發的幾個重要軟體，如：

Emacs
GNU C (GCC)
GNU C Library (glibc)
Bash shell
造成後來很多的軟體開發者可以藉由這些基礎的工具來進行程式開發！ 進一步壯大了自由軟體團體！這是很重要的！不過，對於GNU的最初構想 『建立一個自由的Unix作業系統』來說，
有這些優秀的程式是仍無法滿足， 因為，當下並沒有『自由的Unix核心』存在...所以這些軟體仍只能在那些有專利的 Unix平台上工作～～一直到Linux的出現...
更多的FSF開發的軟體可以參考如下網頁：

https://www.fsf.org/resources
Tips鳥哥事實上，GNU 自己開發的核心稱為 hurd， 是一個架構相當先進的核心。不過由於開發者在開發的過程中對於系統的要求太過於嚴謹，因此推出的時程一再延後，
所以才有後來 Linux 的開發！